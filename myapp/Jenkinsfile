vuln_toplevel = 0
vuln_transitive = 0
outdated_toplevel = 0
outdated_transitive = 0
vuln_toplevel_critical = 0
vuln_toplevel_high = 0
vuln_toplevel_medium = 0
vuln_toplevel_low = 0
vuln_transitive_critical = 0
vuln_transitive_high = 0
vuln_transitive_medium = 0
vuln_transitive_low = 0
def now = new Date()

pipeline {
   agent any
    tools {
        nodejs "nodejs"
    }
    stages {
        stage("Räkna sårbarheter") {
            steps {
                script {
                    def vulnerabilities = readJSON(file: "myapp/dotnet_vulnerabilities.json")
                    def outdated = readJSON(file: "myapp/dotnet_outdated.json")

                    countDotnetVulnerabilities(vulnerabilities)
                    countDotnetOutdatedPackages(outdated)

                    if (vuln_toplevel + vuln_transitive > 0) {
                        slackSend(channel: "#team1-dependency_check", color: setSlackMessageColor(vuln_toplevel_critical, vuln_toplevel_high, vuln_toplevel_medium, vuln_toplevel_low), message: "Number of top level found: ${vuln_toplevel} (${vuln_toplevel_critical} critical, ${vuln_toplevel_high} high, ${vuln_toplevel_medium} medium, and ${vuln_toplevel_low} low). ${notifyChannel(vuln_toplevel_critical)}")
                        slackSend(channel: "#team1-dependency_check", color: setSlackMessageColor(vuln_transitive_critical, vuln_transitive_high, vuln_transitive_medium, vuln_transitive_low), message: "Number of transitive found: ${vuln_transitive} (${vuln_transitive_critical} critical, ${vuln_transitive_high} high, ${vuln_transitive_medium} medium, and ${vuln_transitive_low} low). ${notifyChannel(vuln_toplevel_critical)}")
                    }
                }
            }
        }
    }
}

def notifyChannel(critical) {
    if (critical > 0) {
        return "@channel"
    } else {
        return ""
    }
}

def setSlackMessageColor(critical, high, medium, low) {
    if (critical > 0) {
        return "#b100cd"
    } else if (high > 0) {
        return "#f101e2c"
    } else if (medium > 0) {
        return "#fff200"
    } else {
        return "#fffffc"
    }
}

def countDotnetVulnerabilities(json) {
    // vuln_toplevel = 0
    // vuln_transitive = 0

    // vuln_toplevel_critical = 0
    // vuln_toplevel_high = 0
    // vuln_toplevel_medium = 0
    // vuln_toplevel_low = 0
    // vuln_transitive_critical = 0
    // vuln_transitive_high = 0
    // vuln_transitive_medium = 0
    // vuln_transitive_low = 0

    for (int i = 0; i < json.projects.size(); i++) {
        if (json.projects[i].frameworks != null) {
            if (json.projects[i].frameworks[0].topLevelPackages != null) {
                for (int j = 0; j < json.projects[i].frameworks[0].topLevelPackages.size(); j++) {
                    if (json.projects[i].frameworks[0].topLevelPackages[j] != null) {
                        for (int k = 0; k < json.projects[i].frameworks[0].topLevelPackages[j].vulnerabilities.size(); k++) {
                            if (json.projects[i].frameworks[0].topLevelPackages[j].vulnerabilities[k] != null) {
                                vuln_toplevel++

                                if (json.projects[i].frameworks[0].topLevelPackages[j].vulnerabilities[k].severity == "Critical") {
                                    vuln_toplevel_critical++
                                } else if (json.projects[i].frameworks[0].topLevelPackages[j].vulnerabilities[k].severity == "High") {
                                    vuln_toplevel_high++
                                } else if (json.projects[i].frameworks[0].topLevelPackages[j].vulnerabilities[k].severity == "Medium") {
                                    vuln_toplevel_medium++
                                } else {
                                    vuln_toplevel_low++
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    for (int i = 0; i < json.projects.size(); i++) {
        if (json.projects[i].frameworks != null) {
            if (json.projects[i].frameworks[0].transitivePackages != null) {
                for (int j = 0; j < json.projects[i].frameworks[0].transitivePackages.size(); j++) {
                    if (json.projects[i].frameworks[0].transitivePackages[j] != null) {
                        for (int k = 0; k < json.projects[i].frameworks[0].transitivePackages[j].vulnerabilities.size(); k++) {
                            if (json.projects[i].frameworks[0].transitivePackages[j].vulnerabilities[k]) {
                                vuln_transitive++

                                if (json.projects[i].frameworks[0].transitivePackages[0].vulnerabilities[0].severity == "Critical") {
                                    vuln_transitive_critical++
                                } else if (json.projects[i].frameworks[0].transitivePackages[0].vulnerabilities[0].severity == "High") {
                                    vuln_transitive_high++
                                } else if (json.projects[i].frameworks[0].transitivePackages[0].vulnerabilities[0].severity == "Medium") {
                                    vuln_transitive_medium++
                                } else {
                                    vuln_transitive_low++
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

def countDotnetOutdatedPackages(json) {
    outdated_toplevel = 0
    outdated_transitive = 0
    
    for(int i = 0; i < json.projects.size(); i++) {
        if (json.projects[i].frameworks != null) {
            if (json.projects[i].frameworks[0].topLevelPackages != null) {
                for(int j = 0; j < json.projects[i].frameworks[0].topLevelPackages.size(); j++)
                    outdated_toplevel++
            }
        }
    }

    for(int i = 0; i < json.projects.size(); i++) {
        if (json.projects[i].frameworks != null) {
            if (json.projects[i].frameworks[0].transitivePackages != null) {
                for(int j = 0; j < json.projects[i].frameworks[0].transitivePackages.size(); j++)
                    outdated_transitive++
            }
        }
    }
}